// api/token.js â€” EDGE runtime (super cepat)
export const config = { runtime: "edge" };

const textEncoder = new TextEncoder();

// base64url helper
const b64u = (buf) =>
  btoa(String.fromCharCode(...new Uint8Array(buf)))
    .replaceAll("+", "-")
    .replaceAll("/", "_")
    .replaceAll("=", "");

const b64uFromStr = (s) => {
  const bin = textEncoder.encode(s);
  let str = "";
  for (let i = 0; i < bin.length; i++) str += String.fromCharCode(bin[i]);
  return btoa(str).replaceAll("+", "-").replaceAll("/", "_").replaceAll("=", "");
};

// HMAC-SHA256 (HS256) sign
async function hs256Sign(secret, dataUint8) {
  const key = await crypto.subtle.importKey(
    "raw",
    textEncoder.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  return crypto.subtle.sign("HMAC", key, dataUint8);
}

// uuid v4 kecil & cepat (cukup untuk deviceid)
function uuid4() {
  const a = crypto.getRandomValues(new Uint8Array(16));
  a[6] = (a[6] & 0x0f) | 0x40; // version 4
  a[8] = (a[8] & 0x3f) | 0x80; // variant
  const h = [...a].map(x => x.toString(16).padStart(2, "0")).join("");
  return `${h.slice(0,8)}-${h.slice(8,12)}-${h.slice(12,16)}-${h.slice(16,20)}-${h.slice(20)}`;
}

function jsonResponse(obj, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: {
      "content-type": "application/json; charset=utf-8",
      // CORS + NO-CACHE
      "access-control-allow-origin": "*",
      "access-control-allow-methods": "GET,POST,OPTIONS",
      "access-control-allow-headers": "content-type, authorization",
      "cache-control": "no-store, no-cache, must-revalidate, max-age=0",
      pragma: "no-cache",
      expires: "0",
    },
  });
}

export default async function handler(req) {
  if (req.method === "OPTIONS") return new Response(null, { status: 204 });

  // ENV
  const JWT_SECRET = process.env.JWT_SECRET || "GANTI_DENGAN_SECRET_YANG_KUAT";
  const ACCESS_TTL = Number(process.env.ACCESS_TTL || "900"); // detik
  const AUTHOR = process.env.AUTHOR || "FAJRIAG - https://github.com/FAJRIAG";

  // Query
  const { searchParams } = new URL(req.url);
  const userId = Number(searchParams.get("userId") || "292042932");
  const registerType = String(searchParams.get("registerType") || "TEMP");

  // JWT header & payload (minimal & cepat)
  const header = { alg: "HS256", typ: "JWT" };
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    registerType,
    userId,
    iat: now,
    exp: now + ACCESS_TTL,
  };

  // Encode header.payload
  const headerB64 = b64uFromStr(JSON.stringify(header));
  const payloadB64 = b64uFromStr(JSON.stringify(payload));
  const signingInput = `${headerB64}.${payloadB64}`;
  const sigBuf = await hs256Sign(JWT_SECRET, textEncoder.encode(signingInput));
  const signatureB64 = b64u(sigBuf);

  const jwt = `${signingInput}.${signatureB64}`;

  // Bungkus base64 biasa (biar mirip endpoint referensi)
  const wrapped = btoa(jwt);

  // deviceid cepat
  const deviceid = uuid4();

  return jsonResponse({
    author: AUTHOR,
    token: wrapped,
    deviceid,
    info: "Token auto-generated by your Edge Function",
  });
}
